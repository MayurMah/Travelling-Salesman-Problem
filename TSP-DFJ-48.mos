model ModelName
uses "mmxprs"; !gain access to the Xpress-Optimizer solver
uses "mmsystem" ! include package to operating systems

N := 48  ! number of cities

declarations
	Cities = 1 .. N                         	! set of cities
	coord: array(Cities,1..3) of real			! array of coordinates of cities, to be read from US48.dat
	dist: array(Cities,Cities) of real  		! distance between each pair of cities
	x : array(Cities,Cities) of mpvar       	! decision variables
	flag : integer                          	! flag=0: not optimal yet; flag=1: optimal 
	ind : range                             	! dynamic range
	numSubtour : integer                    	! number of generated subtours
	numSubtourCities : integer					! number of cities on a generated subtour
	SubtourCities : array(Cities) of integer	! SubtourCities(i)=1 means city i is on the subtour 
	subtourCtr : dynamic array(ind) of linctr   ! dynamic array of subtour elimination constraints
	onetourCtr : dynamic array(ind) of linctr   ! dynamic array of subtour elimination constraints
	twotourCtr : dynamic array(ind) of linctr   ! dynamic array of subtour elimination constraints
	threetourCtr : dynamic array(ind) of linctr   ! dynamic array of subtour elimination constraints
	fourtourCtr : dynamic array(ind) of linctr   ! dynamic array of subtour elimination constraints
	NEXTCITY : array(1..N+1) of integer			! array to save the nextcity
end-declarations

! initialization part is given 
initializations from "US48.dat"
     coord
end-initializations


! compute dist(i,j) the distance between each pair of cities using (x,y) coordinates of the cities, which are in the array coord

forall(i in 1..N) do
	forall(j in 1..N) do
		dist(i,j) := sqrt((coord(i,2)-coord(j,2))^2+(coord(i,3)-coord(j,3))^2)
		!writeln(dist(i,j))
	end-do
end-do

!!!!!!!!!!!!! objective: total distance of a tour

TotalDist := sum(i in 1..N,j in 1..N) (dist(i,j)*x(i,j))


!!!!!!!!!! write constraint: x(i,j) is binary !!!!!!!!!!!!!!!!

forall(i in 1..N,j in 1..N) x(i,j) is_binary


!!!!!!!!!!! write assignment constraints: in and out constraints for each city !!!!!!!!!!!!!!!!!!!

forall(i in 1..N) do
	sum(j in 1..N) x(i,j) = 1
end-do

forall(i in 1..N) do
	sum(j in 1..N) x(j,i) = 1
end-do


!!!!!!!!!! write 1-city subtour elimination constraints here !!!!!!!!!!!!!!!!!

forall(i in 1..N) do
	onetourCtr(getsize(onetourCtr)+1) := x(i,i) = 0
end-do



!!!!!!!!!!! write 2-city subtour elimination constraints here !!!!!!!!!!!!!!!!!!!

forall(i in 1..N,j in 1..N | (j>i)) do
		twotourCtr(getsize(twotourCtr)+1) := (x(i,j)+x(j,i)) <= 1
end-do



!!!!!!!!!! write 3-city subtour elimination constraints here !!!!!!!!!!!!!!

!forall(i in 1..N,j in 1..N,k in 1..N | (j>i) and (k>j)) do
!		threetourCtr(getsize(threetourCtr)+1) := x(i,j)+x(j,k)+x(k,i)+x(i,k)+x(k,j)+x(j,i) <=2
		!writeln("printing: ",i," ",j," ",k) 
!end-do

!!!!!!!!!! write 4-city subtour elimination constraints here !!!!!!!!!!!!!!

!forall(i in 1..N,j in 1..N,k in 1..N,l in 1..N |(j>i)and(k>j)and(l>k)) do
!		fourtourCtr(getsize(fourtourCtr)+1) := x(i,j)+x(j,k)+x(k,l)+x(l,i)+x(i,k)+x(k,j)+x(j,l)+x(i,l)+x(l,j)+x(k,i)+x(l,k)+x(j,i)<= 3
!		writeln("printing: ",i," ",j," ",k," ",l) 
!end-do


!!!!!!!!!!!!! constraint generation algorithm !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
numSubtour := 0   ! number of added subtour elimination constraints is zero
flag := 0 ! initalize flag to be 0, so no optimal solution has been found yet

repeat 
	
	!!!!!!!!!!!!!!! Solve the restricted master problem  !!!!!!!!!!!
	minimize(TotalDist)
	
	
	
	! Output the solution of the restricted master problem
	writeln("the restricted master problem is solved:")
	forall (i in Cities, j in Cities) do
		if abs(getsol(x(i,j))-1)<0.1 then  
		! note here we could have simply written "if getsol(x(i,j))=1 then", 
		! but I found cases where Xpress doesn't output all such x(i,j)'s. 
		! So this is a quick and ugly fix. 
		! You can use this trick in the later part when you need to check if x(i,j) is 1 or not
		! Also, feel free to develop your own solution
			writeln("x(",i,",",j,")=",getsol(x(i,j)))
		end-if
	end-do
	
	!!!!!!!!!!!!!!!!!!!!!  find a subtour !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	! We want to find a subtour starting at city 1 (Atlanta) and ending at City 1 (such a subtour always exists!)
	! First, initialize a few things:
	numSubtourCities := 0    ! the number of cities on the subtour
	forall (i in Cities) do  ! SubtourCities(i)=1 if city i is on the subtour, initialize all entries to zero
		SubtourCities(i):=0  ! need to change entries when city i is found on the tour
	end-do
	subtourCities(1) := 1  ! City 1 (Atlanta) is always on the subtour
		
	! Start the procedure to look for a subtour starting and ending at City 1.
	! Note: Need to update SubtourCities for cities that are on the subtour
	! Also need to keep track of the number of cities numSubtourCities on the subtour

	forall (i in 1..N+1) do
			NEXTCITY(i):= 0
	end-do
	
	forall (i in Cities, j in Cities) do
		if abs(getsol(x(i,j))-1)<0.1 then  
			NEXTCITY(i):=j
		end-if
	end-do
	
	curcity:=1
	repeat
		curcity := NEXTCITY(curcity)
		SubtourCities(curcity) := 1
		!writeln("here..",curcity," ",SubtourCities(curcity))
		numSubtourCities := numSubtourCities + 1
	until curcity=1
	
	
	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	
	! output the subtour you found
	writeln("\nFound a tour of distance ", getobjval, " and ", numSubtourCities, " cities")
	writeln("Cities on the subtour are:")
	forall (i in Cities | SubtourCities(i)=1) do
	! Note: forall ( ... | express ) is very useful, you may need to use it in the following part to add subtour elimination constraints
		write(i, " ")
	end-do
	writeln(" ")
	
	
	!!!!!!!!!!!!!!!!!!!! add the subtour elimination constraint !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	! If the subtour found above is indeed a subtour (i.e. has fewer than 48 cities), then add the corresponding subtour elimination constraint to the problem
	! otherwise, if the subtour has 48 cities, then it's a TSP tour and optimal, terminate the constraint generation by setting the flag to 1

	if numSubtourCities = N then
		flag := 1
	else
		!subtourCtr(getsize(subtourCtr)+1) := sum(i in 1..numSubtourCities,j in 1..numSubtourCities) (x(SubtourCities(i),SubtourCities(j))) <= (numSubtourCities-1)
		!forall(i in Cities | (SubtourCities(i)=1)) do
			!(x(i,j)) <= (numSubtourCities-1)
		!	writeln("inside i, j:",i," ",NEXTCITY(i))
		!end-do
		!writeln("calculating sum")
		!writeln(sum(i in Cities | (SubtourCities(i)=1)) (i))
		subtourCtr(getsize(subtourCtr)+1) := sum(i in Cities, j in Cities | (SubtourCities(i)=1 and SubtourCities(j)=1)) (x(i,j)) <= (numSubtourCities-1)
		
	end-if
	

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    	
until flag = 1

!!!!!!!!!!!!!!!!!!!! end of the constraint generation algorithm !!!!!!!!!!!!!!!!!!!!!!!!!



	writeln("\nOptimal TSP distance = ", getobjval)
	forall (i in Cities, j in Cities) do
		if abs(getsol(x(i,j))-1)<0.1 then
			writeln("x(",i,",",j,")=",getsol(x(i,j)))
		end-if
	end-do
	

	! write the solution to an output file 
	! then run matlab code US48TourPlot.m to plot the tour
	fopen("US48.output",F_OUTPUT)
	forall (i in Cities, j in Cities) do
		if abs(getsol(x(i,j))-1)<0.1 then
			writeln(i,"\t",j)
		end-if
	end-do
	fclose(F_OUTPUT)
writeln("End running model")

end-model
